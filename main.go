package main

import (
	"fmt"
	"io/ioutil"
)

func main() {
	const (
		providerSourceDir       = "/Users/rohabhat/Documents/work/code/go/src/github.com/oracle/terraform-provider-oci/provider"
		outputOfProviderParsing = "./providerCode.out"

		autoGenSourceDir           = "/Users/rohabhat/Documents/work/code/go/src/github.com/oracle/terraform-code-gen/outputFiles/privateIps/terraform-provider-oci/provider"
		outputOfAutoGenCodeParsing = "./autoGenCode.out"
	)

	processProviderCode(providerSourceDir, outputOfProviderParsing)

	processAutoGeneratedCode(autoGenSourceDir, outputOfAutoGenCodeParsing)
}

func processProviderCode(providerSourceDir string, outputOfProviderParsing string) {
	var funcNamesWithSchemaDefs = readProviderForFuncNamesWithSchemaDefs(providerSourceDir)

	files, err := ioutil.ReadDir(providerSourceDir)
	if err != nil {
		panic("Could not read source directory")
	}

	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if !isResourceFile(file.Name()) && !isDataSourceFile(file.Name()) {
			continue
		}

		filePath := fmt.Sprintf("%s/%s", providerSourceDir, file.Name())

		fmt.Printf("File: %s:\n", file.Name())

		printSchema(filePath, funcNamesWithSchemaDefs)

		fmt.Println()
	}
}

func processAutoGeneratedCode(autoGenSourceDir string, outputOfAutoGenCodeParsing string) {
	files, err := ioutil.ReadDir(autoGenSourceDir)
	if err != nil {
		panic("Could not read source directory")
	}

	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if !isResourceFile(file.Name()) && !isDataSourceFile(file.Name()) {
			continue
		}

		filePath := fmt.Sprintf("%s/%s", autoGenSourceDir, file.Name())
		funcName := findFuncNameWithSchemaDefsInAutoGenCode(filePath)

		fmt.Printf("File: %s:\n", file.Name())

		printSchema(filePath, map[string]bool{funcName: false})

		fmt.Println()
	}
}
